{
  "_args": [
    [
      {
        "raw": "flowgen@^1.9.0",
        "scope": null,
        "escapedName": "flowgen",
        "name": "flowgen",
        "rawSpec": "^1.9.0",
        "spec": ">=1.9.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Osama\\Desktop\\ers\\node_modules\\flow-typed"
    ]
  ],
  "_from": "flowgen@^1.9.0",
  "_hasShrinkwrap": false,
  "_id": "flowgen@1.10.0",
  "_location": "/flowgen",
  "_nodeVersion": "10.16.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/flowgen_1.10.0_1565730714989_0.7788136824738634"
  },
  "_npmUser": {
    "name": "orta",
    "email": "orta.therox@gmail.com"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "flowgen@^1.9.0",
    "scope": null,
    "escapedName": "flowgen",
    "name": "flowgen",
    "rawSpec": "^1.9.0",
    "spec": ">=1.9.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/flow-typed"
  ],
  "_resolved": "https://registry.npmjs.org/flowgen/-/flowgen-1.10.0.tgz",
  "_shasum": "a041ae31d543d22166e7ba7c296b8445deb3c2e4",
  "_shrinkwrap": null,
  "_spec": "flowgen@^1.9.0",
  "_where": "C:\\Users\\Osama\\Desktop\\ers\\node_modules\\flow-typed",
  "bin": {
    "flowgen": "./lib/cli/index.js"
  },
  "dependencies": {
    "@babel/code-frame": "^7.0.0",
    "@babel/highlight": "^7.0.0",
    "commander": "^2.11.0",
    "lodash": "^4.17.4",
    "paralleljs": "^0.2.1",
    "prettier": "^1.16.4",
    "shelljs": "^0.8.3",
    "typescript": "^3.4",
    "typescript-compiler": "^1.4.1-2"
  },
  "description": "Generate flowtype definition files from TypeScript",
  "devDependencies": {
    "@babel/cli": "^7.0.0",
    "@babel/core": "^7.0.0",
    "@babel/plugin-proposal-class-properties": "^7.0.0",
    "@babel/plugin-proposal-decorators": "^7.0.0",
    "@babel/plugin-proposal-export-namespace-from": "^7.0.0",
    "@babel/plugin-proposal-function-sent": "^7.0.0",
    "@babel/plugin-proposal-json-strings": "^7.0.0",
    "@babel/plugin-proposal-numeric-separator": "^7.0.0",
    "@babel/plugin-proposal-optional-chaining": "^7.2.0",
    "@babel/plugin-proposal-throw-expressions": "^7.0.0",
    "@babel/plugin-syntax-dynamic-import": "^7.0.0",
    "@babel/plugin-syntax-import-meta": "^7.0.0",
    "@babel/preset-env": "^7.0.0",
    "@babel/preset-flow": "^7.0.0",
    "@babel/preset-react": "^7.0.0",
    "@types/node": "^11.9.0",
    "@types/react": "^16.8.3",
    "babel-core": "^7.0.0-bridge.0",
    "babel-eslint": "^10.0.1",
    "babel-jest": "^24.5.0",
    "esformatter": "^0.10.0",
    "eslint": "^5.13.0",
    "eslint-config-prettier": "^4.0.0",
    "eslint-plugin-flowtype": "^3.2.1",
    "eslint-plugin-import": "^2.16.0",
    "eslint-plugin-jest": "^22.2.2",
    "flow-bin": "^0.102.0",
    "jest": "^24.5.0",
    "next": "^9.0.3",
    "recast": "^0.18.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-3lsoaa1vxGXhnkHuoE4mLPJi/klvpR3ID8R9CFJ/GBNi+cxJXecWQaUPrWMdNI5tGs8Y+7wrIZaCVFKFLQiGOg==",
    "shasum": "a041ae31d543d22166e7ba7c296b8445deb3c2e4",
    "tarball": "https://registry.npmjs.org/flowgen/-/flowgen-1.10.0.tgz",
    "fileCount": 43,
    "unpackedSize": 121723,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdUyebCRA9TVsSAnZWagAA2o4P/RBaTK4NwDOdQJjwZDtd\n6q0oPpc1ovnmYoWp/5olz4w1MgXRYh43bZJHCScMUu+9CeC8NYTxCNKmkHuV\norHBLc7fPzx1LDQp7dJ3TIXcK0+xIpTweCkkfOpMJ7twy1C150/fkVHFsm88\n71m4u62RSu4OY48yJuQTSdjMyo5xkdeku0S3X9aSM5KjhTAwdw8qko9fpePB\nmU4ZF+Y3KuLMNBVXkPdgN5IsSSE4VLJ697KsZyUernAS7/BX5bfNTW0HJq3u\nfVPHutCUmMQCQ48Z/j6LlUx4nqWNXI7NYbiqGbupUDH8ohIBB+x7ssf9pYOe\nRl0rj2sXMu/nkxIy5mwEzsQcM2ms+rBR2g8DQy47ppo/pvSrjBs2uKffdfxO\notW9m9prIdUqNtyW9hZlEWghpX6U4n/YD5IfC+hCNFG09qSGj4xAD3pOgIpu\nJUpZSPor/GcKTDx6mKveLt511otP9lX16GPOYCtsbCh6Bf36C/0aNqi7m9WY\nWfoSLk9G7EjcwNZy8IpDTWrETu+ggbrW0b1i9zcQctMjoYQXcDX8ZzaHAJ6L\ni+0Je/E0laVrmnHz8ep805Adr3vPCazhh7GXBU62+GsLYSqbatp59pKr5qD+\nnHUnaMp72d5v9iFwDmZYe12SUTuxO+HEyOAInhzXjsxeL2KwfsCNZfkLennH\nTyEH\r\n=jkMh\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "lib",
    "index.d.ts",
    "index.js.flow"
  ],
  "gitHead": "6477f148402b8a64cbee9449e33facb4d1638bbd",
  "jest": {
    "testMatch": [
      "**/__tests__/**/*.js",
      "**/?(*.)+(spec|test).js"
    ]
  },
  "license": "ISC",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "joarwilk",
      "email": "joar.wilk@gmail.com"
    },
    {
      "name": "orta",
      "email": "orta.therox@gmail.com"
    }
  ],
  "name": "flowgen",
  "optionalDependencies": {},
  "readme": "# Flowgen\n\n## The state of the converter\nIt's surprisingly robust and non-lossy as it stands right now, in big part thanks to how similar flow and typescript definition files are. Please see the output in [this flow-typed PR](https://github.com/flowtype/flow-typed/pull/590) for the state of the output.\n\n| Supported? | Syntax | TypeScript | Flow |\n|---|---|---|---|\n| ✅ | Void type | `void` | `void` |\n| ✅ | Undefined type | `undefined` | `void` |\n| ✅ | Unknown type | `unknown` | `mixed` |\n| ✅ | Symbol type | `symbol` | `Symbol` |\n|    | Unique symbol type | `unique symbol` | `Symbol` |\n| ✅ | Object type | `object` | `{[key: string]: any}` |\n| ✅ | Never type | `never` | `empty` |\n| ✅ | Variance | `interface A { readonly b: B, c: C }` | `interface A { +b: B, c: C }` |\n| ✅ | Functions | `(a: A, b: B) => C` | `(a: A, b: B) => C` |\n| ✅ | Indexers | `{[k: string]: string}` | `{[k: string]: string}` |\n|    | This type | `(this: X, a: A, b: B) => C` | `(a: A, b: B) => C` |\n|    | Type guards | `(a: X) => a is A` | `(a: X) => boolean` |\n| ✅ | Type parameter bounds | `function f<A extends string>(a:A){}` | `function f<A: string>(a:A){}` |\n| ✅ | keyof X | `keyof X` | `$Keys<X>` |\n| ✅ | X[keyof X] | `X[keyof X]` | `$ElementType<X, $Keys<X>>` |\n| ✅ | Partial | `Partial<X>` | `$Rest<X, {}>` |\n| ✅ | Readonly | `Readonly<X>` | `$ReadOnly<X>` |\n| ✅ | ReadonlyArray | `ReadonlyArray<X>` | `$ReadOnlyArray<X>` |\n| ✅ | ReadonlySet | `ReadonlySet<X>` | `$ReadOnlySet<X>` |\n| ✅ | ReadonlyMap | `ReadonlyMap<X, Y>` | `$ReadOnlyMap<X, Y>` |\n| ✅ | Record | `Record<K, T>` | `{ [key: K]: T }` |\n|    | Pick | `Pick<T, K>` |  |\n|    | Exclude | `Exclude<T, U>` |  |\n|    | Extract | `Extract<T, U>` |  |\n| ✅ | NonNullable | `NonNullable<X>` | `$NonMaybeType<X>` |\n| ✅ | ReturnType | `ReturnType<F>` | `$Call<<R>((...args: any[]) => R) => R, F>` |\n|    | InstanceType | `InstanceType<X>` |  |\n|    | Required | `Required<X>` |  |\n|    | ThisType | `ThisType<X>` |  |\n| ✅ | T['string'] | `T['string']` | `$PropertyType<T, k>` |\n| ✅ | T[k] | `T[k]` | `$ElementType<T, k>` |\n| ✅ | Mapped types | `{[K in keyof Obj]: Obj[K]}` | `$ObjMapi<Obj, <K>(K) => $ElementType<Obj, K>>` |\n|    | Conditional types | `A extends B ? C : D` | `any` |\n| ✅ | typeof operator | `typeof foo` | `typeof foo` |\n| ✅ | Tuple type | `[number, string]` | `[number, string]` |\n| ✅ | Type alias | `type A = string` | `type A = string` |\n| ✅ | type/typeof import | `import A from 'module'` | `import type A from 'module'` |\n\n## Usage\n\nInstall using `npm i flowgen --save`\n\n```js\nimport { compiler } from 'flowgen';\n\n// To compile a d.ts file\nconst flowdef = compiler.compileDefinitionFile(filename);\n\n// To compile a string\nconst flowdef = compiler.compileDefinitionString(str);\n\n// To compile a typescript test file to JavaScript\n// esTarget = ES5/ES6 etc\nconst testCase = compiler.compileTest(path, esTarget)\n```\n\n*Recommended second step:*\n\n```js\nimport { beautify } from 'flowgen';\n\n// Make the definition human readable\nconst readableDef = beautify(generatedFlowdef);\n```\n\n### CLI\n\nStandard usage (will produce `export.flow.js`):\n```\nnpm i -g flowgen\nflowgen lodash.d.ts\n```\n\n### Options\n```\n-o / --output-file [outputFile]: Specifies the filename of the exported file, defaults to export.flow.js\n```\n\n### Flags for specific cases\n```\n--flow-typed-format: Format output so it fits in the flow-typed repo\n--compile-tests: Compile any sibling <filename>-tests.ts files found\n--no-module-exports: Convert `export = Type` only to default export, instead of `declare module.exports: Type`\n--interface-records: Convert TypeScript interfaces to Exact Objects\n--no-jsdoc: Ignore TypeScript JSDoc\n--add-flow-header: Add `// @flow` to generated files. Should be used for libs.\n```\n\n\n## The difficult parts\n\n### Namespaces\nNamespaces have been a big headache. What it does right now is that it splits any namespace out into prefixed global scope declarations instead. It works OK, but its not pretty and there's some drawbacks to it.\n\n### External library imports\nDefinitions in TS and flow are often quite different, and imported types from other libraries don't usually have\na one-to-one mapping. Common cases are `React.ReactElement`, `React.CSSProps`etc.\nThis might require manual processing, or we add a set of hardcoded mutations that handle common cases.\n\n### Odd TS conventions\n[Lodash](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/9fb1696ad55c0ac54bbf6e477f21b52536211a1e/types/lodash/index.d.ts) has been one of the reference libraries i've worked with when creating the\nconverter. The definition is mostly just a series of interfaces with the same name being re-declared over and over again for each function, which doesn't translate to flow at all. There's multiple ways of solving this but I don't have a great solution for it in place yet.\n\n## Contributing\n\nAll help is appreciated. Please [tweet at me](https://twitter.com/joarwilk) if you want some help getting started, or just want to discuss ideas on how to solve the trickier parts.\n\n## Distribution\n\n* `git pull origin master`\n* `yarn compile`\n* Change the version in `package.json`\n* `git add .`\n* `git commit -m \"New release\"\n* `npm publish`\n* `git push`\n",
  "readmeFilename": "README.md",
  "scripts": {
    "compile": "babel ./src --out-dir lib --delete-dir-on-start --ignore 'src/**/*.spec.js'",
    "compile:watch": "npm run compile -- -w",
    "prepublishOnly": "npm run compile",
    "prettier": "prettier  --write \"{src,types}/**/*.js\"",
    "test": "jest"
  },
  "typings": "index.d.ts",
  "version": "1.10.0"
}
