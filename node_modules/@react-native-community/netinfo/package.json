{
  "@react-native-community/bob": {
    "source": "js",
    "output": "lib",
    "targets": [
      [
        "commonjs",
        {
          "flow": true
        }
      ],
      "module"
    ]
  },
  "_args": [
    [
      {
        "raw": "@react-native-community/netinfo@2.0.10",
        "scope": "@react-native-community",
        "escapedName": "@react-native-community%2fnetinfo",
        "name": "@react-native-community/netinfo",
        "rawSpec": "2.0.10",
        "spec": "2.0.10",
        "type": "version"
      },
      "C:\\Users\\Osama\\Desktop\\ers\\node_modules\\expo"
    ]
  ],
  "_from": "@react-native-community/netinfo@2.0.10",
  "_hasShrinkwrap": false,
  "_id": "@react-native-community/netinfo@2.0.10",
  "_location": "/@react-native-community/netinfo",
  "_nodeVersion": "8.16.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/netinfo_2.0.10_1557244605473_0.3414246552048983"
  },
  "_npmUser": {
    "name": "react-native-community-bot",
    "email": "malbranche.thibault+bot@gmail.com"
  },
  "_npmVersion": "6.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@react-native-community/netinfo@2.0.10",
    "scope": "@react-native-community",
    "escapedName": "@react-native-community%2fnetinfo",
    "name": "@react-native-community/netinfo",
    "rawSpec": "2.0.10",
    "spec": "2.0.10",
    "type": "version"
  },
  "_requiredBy": [
    "/expo"
  ],
  "_resolved": "https://registry.npmjs.org/@react-native-community/netinfo/-/netinfo-2.0.10.tgz",
  "_shasum": "d28a446352e75754b78509557988359133cdbcca",
  "_shrinkwrap": null,
  "_spec": "@react-native-community/netinfo@2.0.10",
  "_where": "C:\\Users\\Osama\\Desktop\\ers\\node_modules\\expo",
  "author": {
    "name": "Matt Oakes",
    "email": "hello@mattoakes.net"
  },
  "bugs": {
    "url": "https://github.com/react-native-community/react-native-netinfo/issues"
  },
  "contributors": [
    {
      "name": "Mike Diarmid",
      "email": "mike@invertase.io",
      "url": "Salakar"
    }
  ],
  "dependencies": {},
  "description": "React Native Network Info API for iOS & Android",
  "detox": {
    "test-runner": "jest",
    "runner-config": "example/e2e/config.json",
    "configurations": {
      "ios.sim.debug": {
        "binaryPath": "example/ios/build/Build/Products/Debug-iphonesimulator/NetInfoExample.app",
        "build": "export RCT_NO_LAUNCH_PACKAGER=true && xcodebuild -project example/ios/NetInfoExample.xcodeproj -destination 'platform=iOS Simulator,name=iPhone X' -scheme NetInfoExample -parallelizeTargets -configuration Debug -derivedDataPath example/ios/build  -UseModernBuildSystem=YES | xcpretty -k",
        "type": "ios.simulator",
        "name": "iPhone X"
      },
      "ios.sim.release": {
        "binaryPath": "example/ios/build/Build/Products/Release-iphonesimulator/NetInfoExample.app",
        "build": "export RCT_NO_LAUNCH_PACKAGER=true && xcodebuild -project example/ios/NetInfoExample.xcodeproj -destination 'platform=iOS Simulator,name=iPhone X' -scheme NetInfoExample -parallelizeTargets -configuration Release -derivedDataPath example/ios/build  -UseModernBuildSystem=YES | xcpretty -k",
        "type": "ios.simulator",
        "name": "iPhone X"
      },
      "android.emu.debug": {
        "binaryPath": "example/android/app/build/outputs/apk/debug/app-debug.apk",
        "build": "export RCT_NO_LAUNCH_PACKAGER=true && pushd example/android && ./gradlew assembleDebug assembleAndroidTest -DtestBuildType=debug && popd",
        "type": "android.emulator",
        "name": "TestingAVD"
      },
      "android.emu.release": {
        "binaryPath": "example/android/app/build/outputs/apk/release/app-release.apk",
        "build": "export RCT_NO_LAUNCH_PACKAGER=true && pushd example/android && ./gradlew assembleRelease assembleAndroidTest -DtestBuildType=release && popd",
        "type": "android.emulator",
        "name": "TestingAVD"
      }
    }
  },
  "devDependencies": {
    "@babel/core": "^7.4.3",
    "@react-native-community/bob": "^0.3.3",
    "@react-native-community/eslint-config": "^0.0.3",
    "@semantic-release/git": "7.0.8",
    "babel-core": "^7.0.0-bridge.0",
    "babel-jest": "^24.7.0",
    "babel-plugin-module-resolver": "^3.2.0",
    "detox": "^12.1.2",
    "eslint": "5.16.0",
    "flow-bin": "^0.86.0",
    "jest": "24.7.0",
    "metro-react-native-babel-preset": "0.51.1",
    "prettier": "^1.16.4",
    "react": "16.6.3",
    "react-native": "0.58.4",
    "react-test-renderer": "16.6.3",
    "rimraf": "^2.6.3",
    "semantic-release": "15.13.3",
    "typescript": "^3.4.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-NrIzyLe0eSbhgMnHl2QdSEhaA7yXh6p9jzMomfUa//hoTXE+xbObGDdiWWSQm2bnXnZJg8XCU3AB9qzvqcuLnA==",
    "shasum": "d28a446352e75754b78509557988359133cdbcca",
    "tarball": "https://registry.npmjs.org/@react-native-community/netinfo/-/netinfo-2.0.10.tgz",
    "fileCount": 71,
    "unpackedSize": 228902,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc0aq+CRA9TVsSAnZWagAAfxsQAJwSlc8u32ZhSX2vyNBD\ninpjJuuFnh3HQYCIQZW1RDcXfgxRexBZ3Sd0lWvpf8d3yR2IQz53kW2CX+XH\nY4YVPUwM2sdmFFG8m6wjTVzyZONKzqpsnJHNBkLcvhKS1eC1XH/ATbD/rthJ\nVhrqMjzkrNgKzI16SgWiLBYP3TKJHwwyiVK0MeJkN+qhXbVT9ZuL9ue3pBah\nOf8/EpIhdRYVfQoSJVurUP/Hdw2iHvGlM7GXkGJ/W+7UDjvG7EAxYwIKeQcm\nwtMG9wjGP465GuL4RUtdM5RyJmQLetUVLuw9KV/iVC6+qkJO5AFaTTRkbZM1\nfAFx9PdE6UUvO7eVDpl/jjIBy84XN9VpHu+CYN0V9tZGiKIg8BiOcdup8YA8\n/F5RKjHoLG+rD+Ole7JpeIwshBCWIGd3WnfN8kswOn6QDj7ha8sKVI6iVTLZ\nuWJgzPO5ri7NTiZ9Vo8BXctT32jhcFdPm05ulRlCBansP93kvu2m4k/rRoe8\n3PuV0mxMMsmobSkw1YUVX6zN81eA18IJBjPB7xfcNoI21kcyyb2d9fX13xz+\n+uEyCoUVDgmIr+yIaGP4flqdq9lrrlEIxTaga6dfxdEVpGpobPTmsJw1d5U5\nTo/3CYxHx5WIjgnyrj/bbWTRaEt0JIKcT8GegBMO7OVGzL+qYcjIvA0mS3Rb\nssoO\r\n=OCXH\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "/android",
    "!/android/build",
    "/ios",
    "/js",
    "/lib",
    "/typings",
    "/*.podspec"
  ],
  "gitHead": "00e9683e23b89d68def158f3261f124d736baf0f",
  "homepage": "https://github.com/react-native-community/react-native-netinfo#readme",
  "jest": {
    "preset": "react-native",
    "setupFilesAfterEnv": [
      "<rootDir>/jest.setup.js"
    ]
  },
  "keywords": [
    "react-native",
    "react native",
    "netinfo",
    "networking",
    "network info"
  ],
  "license": "MIT",
  "main": "lib/commonjs/index.js",
  "maintainers": [
    {
      "name": "mattoakes",
      "email": "hello@mattoakes.net"
    },
    {
      "name": "react-native-community-bot",
      "email": "malbranche.thibault+bot@gmail.com"
    }
  ],
  "module": "lib/module/index.js",
  "name": "@react-native-community/netinfo",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^16.0",
    "react-native": ">=0.57 <0.60"
  },
  "react-native": "js/index.js",
  "readme": "\n# `@react-native-community/netinfo`\n\n[![CircleCI Status](https://img.shields.io/circleci/project/github/react-native-community/react-native-netinfo/master.svg)](https://circleci.com/gh/react-native-community/workflows/react-native-netinfo/tree/master) ![Supports Android and iOS](https://img.shields.io/badge/platforms-android%20|%20ios-lightgrey.svg) ![MIT License](https://img.shields.io/npm/l/@react-native-community/netinfo.svg)\n\nReact Native Network Info API for Android & iOS. It allows you to get information on:\n\n* Connection type\n* Connection quality\n\n## Getting started\nInstall the library using either Yarn:\n\n```\nyarn add @react-native-community/netinfo\n```\n\nor npm:\n\n```\nnpm install --save @react-native-community/netinfo\n```\n\nYou then need to link the native parts of the library for the platforms you are using. The easiest way to link the library is using the CLI tool by running this command from the root of your project:\n\n```\nreact-native link @react-native-community/netinfo\n```\n\nIf you can't or don't want to use the CLI tool, you can also manually link the library using the instructions below (click on the arrow to show them):\n\n<details>\n<summary>Manually link the library on iOS</summary>\n\nEither follow the [instructions in the React Native documentation](https://facebook.github.io/react-native/docs/linking-libraries-ios#manual-linking) to manually link the framework or link using [Cocoapods](https://cocoapods.org) by adding this to your `Podfile`:\n\n```ruby\npod 'react-native-netinfo', :path => '../node_modules/@react-native-community/netinfo'\n```\n\n</details>\n\n<details>\n<summary>Manually link the library on Android</summary>\n\nMake the following changes:\n\n#### `android/settings.gradle`\n```groovy\ninclude ':react-native-community-netinfo'\nproject(':react-native-community-netinfo').projectDir = new File(rootProject.projectDir, '../node_modules/@react-native-community/netinfo/android')\n```\n\n#### `android/app/build.gradle`\n```groovy\ndependencies {\n   ...\n   implementation project(':react-native-community-netinfo')\n}\n```\n\n#### `android/app/src/main/.../MainApplication.java`\nOn top, where imports are:\n\n```java\nimport com.reactnativecommunity.netinfo.NetInfoPackage;\n```\n\nAdd the `NetInfoPackage` class to your list of exported packages.\n\n```java\n@Override\nprotected List<ReactPackage> getPackages() {\n    return Arrays.asList(\n            new MainReactPackage(),\n            new NetInfoPackage()\n    );\n}\n```\n</details>\n\n## Migrating from the core `react-native` module\nThis module was created when the NetInfo was split out from the core of React Native. To migrate to this module you need to follow the installation instructions above and then change you imports from:\n\n```javascript\nimport { NetInfo } from \"react-native\";\n```\n\nto:\n\n```javascript\nimport NetInfo from \"@react-native-community/netinfo\";\n```\n\n## Usage\nImport the library:\n\n```javascript\nimport NetInfo from \"@react-native-community/netinfo\";\n```\n\nGet the network state once:\n\n```javascript\nNetInfo.getConnectionInfo().then(data => {\n  console.log(\"Connection type\", data.type);\n  console.log(\"Connection effective type\", data.effectiveType);\n});\n```\n\nSubscribe to network updates:\n\n```javascript\nconst listener = data => {\n  console.log(\"Connection type\", data.type);\n  console.log(\"Connection effective type\", data.effectiveType);\n};\n\n// Subscribe\nconst subscription = NetInfo.addEventListener('connectionChange', listener);\n\n// Unsubscribe through remove\nsubscription.remove();\n// Or, unsubscribe through event name\nNetInfo.removeEventListener('connectionChange', listener);\n```\n\n## API\n* **Types:**\n  * [`NetInfoData`](README.md#netinfodata)\n  * [`NetInfoType`](README.md#netinfotype)\n  * [`NetInfoEffectiveType`](README.md#netinfoeffectivetype)\n* **Methods:**\n  * [`getConnectionInfo()`](README.md#getconnectioninfo)\n  * [`addEventListener()`](README.md#addeventlistener)\n  * [`isConnected.fetch()`](README.md#isconnectedfetch)\n  * [`isConnected.addEventListener()`](README.md#isconnectedaddeventlistener)\n  * [`isConnectionExpensive()`](README.md#isconnectionexpensive)\n\n### Types\n#### `NetInfoData`\nDescribes the current state of the network. It is an object with these properties:\n\n| Property        | Platform     | Type                                                     | Description                                                                                        |\n| --------------- | ------------ | -------------------------------------------------------- | -------------------------------------------------------------------------------------------------- |\n| `type`          | Android, iOS | [`NetInfoType`](README.md#netinfotype)                   | The type of the current connection.                                                                |\n| `effectiveType` | Android, iOS | [`NetInfoEffectiveType`](README.md#netinfoeffectivetype) | The type of cellular connection (eg. 3g, 4g, etc.). Will be `unknown` unless `type` is `cellular`. |\n\n#### `NetInfoType`\nDescribes the current type of network connection. It is an enum with these possible values:\n\n| Value       | Platform     | Description                                         |\n| ----------- | ------------ | --------------------------------------------------- |\n| `none`      | Android, iOS | No network connection is active                     |\n| `unknown`   | Android, iOS | The network state could not be determined           |\n| `cellular`  | Android, iOS | The active network is a cellular connection         |\n| `wifi`      | Android, iOS | The active network is a Wifi connection             |\n| `bluetooth` | Android      | The active network over Bluetooth                   |\n| `ethernet`  | Android      | The active network over a wired ethernet connection |\n| `wimax`     | Android      | The active network over a WiMax connection          |\n\n#### `NetInfoEffectiveType`\nDescribes the current type of the `cellular` connection. It is an enum with these possible values:\n\n| Value     | Platform     | Description                                                                                                              |\n| --------- | ------------ | ------------------------------------------------------------------------------------------------------------------------ |\n| `unknown` | Android, iOS | Either we are not currently connected to a cellular network or type could not be determined                              |\n| `2g`      | Android, iOS | We are currently connected to a 2G cellular network. Includes CDMA, EDGE, GPRS, and IDEN type connections                |\n| `3g`      | Android, iOS | We are currently connected to a 3G cellular network. Includes EHRPD, EVDO, HSPA, HSUPA, HSDPA, and UTMS type connections |\n| `4g`      | Android, iOS | We are currently connected to a 4G cellular network. Includes HSPAP and LTE type connections                             |\n\n### Methods\n\n#### `getConnectionInfo()`\n**Platforms:** Android, iOS\n\nReturns a `Promise` that resolves to a [`NetInfoData`](README.md#netinfodata) object.\n\n**Example:**\n```javascript\nNetInfo.getConnectionInfo().then(data => {\n  console.log(\"Connection type\", data.type);\n  console.log(\"Connection effective type\", data.effectiveType);\n});\n```\n\n#### `addEventListener()`\n**Platforms:** Android, iOS\n\nSubscribe to connection information. The callback is called a paramter of type [`NetInfoData`](README.md#netinfodata) whenever the connection state changes. Your listener will be called with the latest information soon after you subscribe and then with any subsiquent changes afterwards. Due to platform differences, you should not assume that the listener is called in the same way across devices or platforms.\n\n| Parameter   | Type                                                        | Description                                                             |\n| ----------- | ----------------------------------------------------------- | ----------------------------------------------------------------------- |\n| `eventName` | `connectionChange`                                          | The event name is always `connectionChange`                             |\n| `listener`  | `(data: `[`NetInfoData`](README.md#netinfodata))` => void` | The listener which will be called whenever the connection state changes |\n\n**Example:**\n```javascript\nconst listener = data => {\n  console.log(\"Connection type\", data.type);\n  console.log(\"Connection effective type\", data.effectiveType);\n};\n\n// Subscribe\nconst subscription = NetInfo.addEventListener('connectionChange', listener);\n\n// Unsubscribe through remove\nsubscription.remove();\n// Or, unsubscribe through event name\nNetInfo.removeEventListener('connectionChange', listener);\n```\n\n#### `isConnected.fetch()`\n**Platforms:** Android, iOS\n\nReturns a `Promise` that resolves to a `boolean` which says if there is an active connection.\n\n*Note: This only says if a device has an active connection, not that it is able to reach the internet.*\n\nGetting the connection status once:\n\n**Example:**\n```javascript\nNetInfo.isConnected.fetch().then(isConnected => {\n  console.log(\"Is connected\", isConnected);\n});\n```\n\n#### `isConnected.addEventListener()`\n**Platforms:** Android, iOS\n\nCalls the listener with a `boolean` parameter whenever the connection state change which says if there is an active connection. Your listener will be called with the latest information soon after you subscribe and then with any subsiquent changes afterwards. Due to platform differences, you should not assume that the listener is called in the same way across devices or platforms.\n\n*Note: This only says if a device has an active connection, not that it is able to reach the internet.*\n\n| Parameter   | Type                              | Description                                                             |\n| ----------- | --------------------------------- | ----------------------------------------------------------------------- |\n| `eventName` | `connectionChange`                | The event name is always `connectionChange`                             |\n| `listener`  | `(isConnection: boolean) => void` | The listener which will be called whenever the connection state changes |\n\n**Example:**\n```javascript\nconst listener = isConnected => {\n  console.log(\"Is connected\", isConnected);\n};\n\n// Subscribe\nconst subscription = NetInfo.isConnected.addEventListener('connectionChange', listener);\n\n// Unsubscribe through remove\nsubscription.remove();\n\n// Unsubscribe through event name\nNetInfo.isConnected.removeEventListener('connectionChange', listener);\n```\n\n#### `isConnectionExpensive()`\n**Platforms:** Android\n\nReturns a `Promise` which resolves to a `boolean` which says if the current active connection is metered or not. A network is classified as metered when the user is sensitive to heavy data usage on that connection due to monetary costs, data limitations, or battery/performance issues.\n\n**Example:**\n```javascript\nNetInfo.isConnectionExpensive().then(isConnectionExpensive => {\n  console.log(\"Is connection expensive\", isConnectionExpensive);\n});\n```\n\n## Known issues with the iOS simulator\n\nThere is a [known](http://openradar.appspot.com/14585459) [issue](http://www.openradar.appspot.com/29913522) with the iOS Simulator which causes it to not receive network change notifications correctly when the host machine disconnects and then connects to Wifi. If you are having issues with iOS then please test on an actual device before reporting any bugs.\n\n## Maintainers\n\n* [Matt Oakes](https://github.com/matt-oakes) - [Freelance React Native Developer](http://mattoakes.net)\n* [Mike Diarmid](https://github.com/salakar) - [Invertase](https://invertase.io)\n\n## Contributing\n\nPlease see the [contributing guide](/CONTRIBUTING.md).\n\n## License\n\nThe library is released under the MIT license. For more information see [`LICENSE`](/LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/react-native-community/react-native-netinfo.git"
  },
  "scripts": {
    "ci:publish": "yarn semantic-release",
    "prepare": "bob build",
    "semantic-release": "semantic-release",
    "start": "react-native start",
    "test": "yarn validate:eslint && yarn validate:flow && yarn validate:typescript && yarn test:jest",
    "test:detox:android:build:debug": "detox build -c android.emu.debug",
    "test:detox:android:build:release": "detox build -c android.emu.release",
    "test:detox:android:bundle:release": "mkdir -p .tmp && react-native bundle --max-workers 4 --platform android --dev false --entry-file example/index.js --bundle-output .tmp/android-bundle.js",
    "test:detox:android:test:debug": "detox test -c android.emu.debug",
    "test:detox:android:test:release": "detox test -c android.emu.release",
    "test:detox:clean": "rimraf example/android/build && rimraf example/android/app/build && rimraf example/android/.gradle && rimraf example/ios/build",
    "test:detox:ios:build:debug": "detox build -c ios.sim.debug",
    "test:detox:ios:build:release": "detox build -c ios.sim.release",
    "test:detox:ios:bundle:release": "mkdir -p .tmp && react-native bundle --max-workers 4 --platform ios --dev false --entry-file example/index.js --bundle-output .tmp/ios-bundle.js",
    "test:detox:ios:test:debug": "detox test -c ios.sim.debug",
    "test:detox:ios:test:release": "detox test -c ios.sim.release",
    "test:jest": "jest '/js/'",
    "validate:eslint": "eslint 'js/**/*.js' 'example/**/*.js'",
    "validate:flow": "flow check",
    "validate:typescript": "tsc --project ./"
  },
  "types": "typings/index.d.ts",
  "version": "2.0.10"
}
